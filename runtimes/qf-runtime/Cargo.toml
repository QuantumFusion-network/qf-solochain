[package]
name = "qf-runtime"
description = "QF Network solochain runtime"
version = "0.5.1"
license.workspace = true
authors.workspace = true
homepage.workspace = true
repository.workspace = true
edition.workspace = true
publish = false

[lints]
workspace = true

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
codec = { features = [
	"derive",
], workspace = true }
scale-info = { features = [
	"derive",
	"serde",
], workspace = true }

# frame
frame-support = { features = ["experimental"], workspace = true }
frame-system = { workspace = true }
frame-try-runtime = { optional = true, workspace = true }
frame-election-provider-support = { workspace = true }
frame-executive = { workspace = true }
frame-metadata-hash-extension = { workspace = true }

# frame pallets
pallet-assets = { workspace = true }
pallet-authorship = { workspace = true }
pallet-balances = { workspace = true }
pallet-grandpa = { workspace = true }
pallet-revive = { workspace = true }
pallet-session = { workspace = true }
pallet-staking = { workspace = true }
pallet-staking-reward-curve = { workspace = true }
pallet-sudo = { workspace = true }
pallet-timestamp = { workspace = true }
pallet-transaction-payment = { workspace = true }
pallet-utility = { workspace = true }

# QF pallets
pallet-faucet = { workspace = true }

# primitives
sp-api = { workspace = true }
sp-block-builder = { workspace = true }
qfp-consensus-spin = { features = [
	"serde",
], workspace = true }
sp-consensus-grandpa = { features = [
	"serde",
], workspace = true }
sp-core = { features = [
	"serde",
], workspace = true }
sp-inherents = { workspace = true }
sp-offchain = { workspace = true }
sp-runtime = { features = [
	"serde",
], workspace = true }
sp-session = { workspace = true }
sp-staking = { workspace = true }
sp-storage = { workspace = true }
sp-transaction-pool = { workspace = true }
sp-version = { features = [
	"serde",
], workspace = true }
sp-genesis-builder = { workspace = true }

# RPC related
frame-system-rpc-runtime-api = { workspace = true }
pallet-staking-runtime-api = { workspace = true }
pallet-transaction-payment-rpc-runtime-api = { workspace = true }

# Used for runtime benchmarking
frame-benchmarking = { optional = true, workspace = true }
frame-system-benchmarking = { optional = true, workspace = true }

# Spin
pallet-spin-anchoring = { workspace = true }
pallet-spin = { workspace = true }

[build-dependencies]
substrate-wasm-builder = { optional = true, workspace = true, default-features = true }

[dev-dependencies]
sp-io = { workspace = true }

[features]
default = ["std"]
std = [
	"codec/std",
	"frame-benchmarking?/std",
	"frame-election-provider-support/std",
	"frame-executive/std",
	"frame-metadata-hash-extension/std",
	"frame-support/std",
	"frame-system-benchmarking?/std",
	"frame-system-rpc-runtime-api/std",
	"frame-system/std",
	"frame-try-runtime?/std",
	"pallet-assets/std",
	"pallet-authorship/std",
	"pallet-balances/std",
	"pallet-grandpa/std",
	"pallet-revive/std",
	"pallet-session/std",
	"pallet-spin/std",
	"pallet-staking-runtime-api/std",
	"pallet-staking/std",
	"pallet-sudo/std",
	"pallet-timestamp/std",
	"pallet-transaction-payment-rpc-runtime-api/std",
	"pallet-transaction-payment/std",
	"pallet-utility/std",
	"qfp-consensus-spin/std",
	"scale-info/std",
	"sp-api/std",
	"sp-block-builder/std",
	"sp-consensus-grandpa/std",
	"sp-core/std",
	"sp-genesis-builder/std",
	"sp-inherents/std",
	"sp-offchain/std",
	"sp-runtime/std",
	"sp-session/std",
	"sp-staking/std",
	"sp-storage/std",
	"sp-transaction-pool/std",
	"sp-version/std",
	"substrate-wasm-builder",
]

runtime-benchmarks = [
	"frame-benchmarking/runtime-benchmarks",
	"frame-election-provider-support/runtime-benchmarks",
	"frame-support/runtime-benchmarks",
	"frame-system-benchmarking/runtime-benchmarks",
	"frame-system/runtime-benchmarks",
	"pallet-assets/runtime-benchmarks",
	"pallet-balances/runtime-benchmarks",
	"pallet-grandpa/runtime-benchmarks",
	"pallet-revive/runtime-benchmarks",
	"pallet-staking/runtime-benchmarks",
	"pallet-sudo/runtime-benchmarks",
	"pallet-timestamp/runtime-benchmarks",
	"pallet-utility/runtime-benchmarks",
	"sp-runtime/runtime-benchmarks",
]

try-runtime = [
	"frame-election-provider-support/try-runtime",
	"frame-executive/try-runtime",
	"frame-support/try-runtime",
	"frame-system/try-runtime",
	"frame-try-runtime/try-runtime",
	"pallet-assets/try-runtime",
	"pallet-authorship/try-runtime",
	"pallet-balances/try-runtime",
	"pallet-grandpa/try-runtime",
	"pallet-revive/try-runtime",
	"pallet-session/try-runtime",
	"pallet-staking/try-runtime",
	"pallet-sudo/try-runtime",
	"pallet-timestamp/try-runtime",
	"pallet-transaction-payment/try-runtime",
	"sp-runtime/try-runtime",
	# TODO: enable try-runtime for pallet-spin
	"pallet-spin/try-runtime",
	"pallet-utility/try-runtime",
]

# Enable the metadata hash generation.
#
# This is hidden behind a feature because it increases the compile time.
# The wasm binary needs to be compiled twice, once to fetch the metadata,
# generate the metadata hash and then a second time with the
# `RUNTIME_METADATA_HASH` environment variable set for the `CheckMetadataHash`
# extension.
metadata-hash = ["substrate-wasm-builder/metadata-hash"]

# A convenience feature for enabling things when doing a build
# for an on-chain release.
on-chain-release-build = ["metadata-hash", "sp-api/disable-logging"]
